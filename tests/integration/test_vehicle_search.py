#!/usr/bin/env python3
"""
Script para probar la b√∫squeda de veh√≠culos por placa
"""

import asyncio
import sys
import os

# Agregar el directorio del proyecto al path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.core.database import AsyncSessionLocal
from app.models.organization import Organization
from app.models.user import User as UserModel
from app.api.v1.endpoints.vehicles import search_vehicle_by_plate
from sqlalchemy import select

async def test_vehicle_search():
    """Probar la b√∫squeda de veh√≠culos por placa"""
    
    async with AsyncSessionLocal() as db:
        try:
            # 1. Buscar la organizaci√≥n admin
            print("üîç Buscando organizaci√≥n admin...")
            
            org_query = select(Organization).where(Organization.email == "admin@ewash.com")
            org_result = await db.execute(org_query)
            organization = org_result.scalar_one_or_none()
            
            if not organization:
                print("‚ùå No se encontr√≥ la organizaci√≥n admin")
                return
            
            print(f"‚úÖ Organizaci√≥n encontrada: {organization.name}")
            
            # 2. Buscar un usuario real de la organizaci√≥n
            user_query = select(UserModel).where(UserModel.organization_id == organization.id)
            user_result = await db.execute(user_query)
            user = user_result.scalar_one_or_none()
            
            if not user:
                print("‚ùå No se encontr√≥ ning√∫n usuario en la organizaci√≥n")
                return
            
            print(f"‚úÖ Usuario encontrado: {user.full_name}")
            
            # 3. Probar b√∫squeda por placa
            test_plates = ["JXY23F", "ABC123", "DEF456", "XYZ999"]
            
            for plate in test_plates:
                print(f"\nüîç Buscando veh√≠culo con placa: {plate}")
                try:
                    vehicle = await search_vehicle_by_plate(
                        plate=plate,
                        db=db,
                        current_user=user
                    )
                    
                    print(f"‚úÖ Veh√≠culo encontrado:")
                    print(f"   üöó Modelo: {vehicle.model}")
                    print(f"   üè∑Ô∏è Placa: {vehicle.plate}")
                    print(f"   üé® Color: {vehicle.color}")
                    print(f"   üìÖ A√±o: {vehicle.year}")
                    print(f"   üîß Tipo: {vehicle.vehicle_type}")
                    
                    if hasattr(vehicle, 'client') and vehicle.client:
                        print(f"   üë§ Cliente: {vehicle.client.full_name}")
                        print(f"   üìû Tel√©fono: {vehicle.client.phone}")
                    
                except Exception as e:
                    print(f"‚ùå No encontrado: {e}")
            
        except Exception as e:
            print(f"‚ùå Error: {e}")
            import traceback
            traceback.print_exc()
        finally:
            await db.close()

if __name__ == "__main__":
    print("üöÄ Probando b√∫squeda de veh√≠culos por placa...")
    asyncio.run(test_vehicle_search()) 